#Задача «Родословная: подсчет уровней»
#Условие
#В генеалогическом древе у каждого человека, кроме родоначальника, есть ровно один родитель.

#Каждом элементу дерева сопоставляется целое неотрицательное число,
#называемое высотой. У родоначальника высота равна 0, у любого другого элемента
#высота на 1 больше, чем у его родителя.

#Вам дано генеалогическое древо, определите высоту всех его элементов.

#Программа получает на вход число элементов в генеалогическом древе N.
#Далее следует N−1 строка, задающие родителя для каждого элемента древа,
#кроме родоначальника. Каждая строка имеет вид имя_потомка имя_родителя.

#Программа должна вывести список всех элементов древа в лексикографическом порядке.
#После вывода имени каждого элемента необходимо вывести его высоту.

#Примечание

#Эта задача имеет решение сложности O(n), но вам достаточно написать решение
#сложности O(n2) (не считая сложности обращения к элементам словаря).

import operator

child_parents = {}
n = int(input())

#заполняем словарь child_parents (потомок - родитель)
for i in range(n-1):
    line = input().split()
    child_parents[line[0]] = line[1]

#создаем словарь древо и заполняем его всеми людьми, которые есть в роду
tree = {}
for key, val in child_parents.items():
    if key not in tree:
        tree[key] = 0
    if val not in tree:
        tree[val] = 0

#если человек из словаря tree (древо) есть в потомках в словаре child_parents,
# значит у него есть родитель и i += 1. Далее этого родителя смотрим в словаре child_parents
# есть ли он в потомках и есть ли у него родители, если да, то цикл продолжается,
# иначе цикл заканчивается
for key in tree.keys():
    i = 0
    key1 = key
    while key1 in child_parents:
        i +=1
        key1 = child_parents[key1]
    tree[key] = i

b = sorted(tree.items(), key = operator.itemgetter(0))
for key, val in tree.items():
    print(key, val)